>>> _7_base_geometry = __import__('7-base_geometry')
>>> BaseGeometry = _7_base_geometry.BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)

# Test with a string
>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] name must be an integer

# Test with zero
>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] age must be greater than 0

# Test with a negative integer
>>> try:
...     bg.integer_validator("distance", -4)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] distance must be greater than 0

# Test with a float
>>> try:
...     bg.integer_validator("score", 9.5)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] score must be an integer

# Test with None
>>> try:
...     bg.integer_validator("value", None)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] value must be an integer

# Test with a boolean
>>> try:
...     bg.integer_validator("flag", True)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] flag must be an integer

# Test with a large integer
>>> bg.integer_validator("large_int", 10**18)

# Test with a boolean False
>>> try:
...     bg.integer_validator("flag", False)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] flag must be an integer

# Test with a complex number
>>> try:
...     bg.integer_validator("complex_num", 1 + 2j)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] complex_num must be an integer

# Test with a list
>>> try:
...     bg.integer_validator("my_list", [1, 2, 3])
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] my_list must be an integer

# Test with a dictionary
>>> try:
...     bg.integer_validator("my_dict", {"key": "value"})
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] my_dict must be an integer

# Test with a tuple
>>> try:
...     bg.integer_validator("my_tuple", (1, 2, 3))
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] my_tuple must be an integer

# Test with a large negative integer
>>> try:
...     bg.integer_validator("large_neg_int", -10**18)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] large_neg_int must be greater than 0

# Test with the maximum possible integer
>>> bg.integer_validator("max_int", 2**31 - 1)

# Test with the minimum possible integer
>>> try:
...     bg.integer_validator("min_int", -2**31)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] min_int must be greater than 0

# Test with an empty string
>>> try:
...     bg.integer_validator("empty_str", "")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] empty_str must be an integer

# Test with a string containing a number
>>> try:
...     bg.integer_validator("num_str", "123")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] num_str must be an integer

# Test with a string containing a negative number
>>> try:
...     bg.integer_validator("neg_num_str", "-123")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] neg_num_str must be an integer

# Test with a string containing a float
>>> try:
...     bg.integer_validator("float_str", "9.5")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] float_str must be an integer

# Test with a negative float
>>> try:
...    bg.integer_validator("neg_float", -9.5)
... except Exception as e:
...    print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] neg_float must be an integer

# Test with a large float
>>> try:
...    bg.integer_validator("large_float", 10**18 + 0.5)
... except Exception as e:
...    print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] large_float must be an integer

# Test with an empty list
>>> try:
...    bg.integer_validator("empty_list", [])
... except Exception as e:
...    print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] empty_list must be an integer

# Test with an empty dictionary
>>> try:
...    bg.integer_validator("empty_dict", {})
... except Exception as e:
...    print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] empty_dict must be an integer

# Test with an empty tuple
>>> try:
...    bg.integer_validator("empty_tuple", ())
... except Exception as e:
...    print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] empty_tuple must be an integer

# Test with a None value
>>> try:
...    bg.integer_validator("none_value", None)
... except Exception as e:
...    print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] none_value must be an integer

# Test with a boolean False value
>>> try:
...    bg.integer_validator("false_value", False)
... except Exception as e:
...    print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] false_value must be an integer

# Test with a boolean True value
>>> try:
...    bg.integer_validator("true_value", True)
... except Exception as e:
...    print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] true_value must be an integer

Trying to print the area
    >>> bg = BaseGeometry()
    >>> bg.area()
    Traceback (most recent call last):
              ...
    Exception: area() is not implemented


Trying to pass a non-integer argument
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name", "5")
    Traceback (most recent call last):
              ...
    TypeError: name must be an integer


Trying to pass a boolean value
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name", True)
    Traceback (most recent call last):
              ...
    TypeError: name must be an integer


Trying to pass a negative value
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name", -5)
    Traceback (most recent call last):
              ...
    ValueError: name must be greater than 0


Trying to pass a zero value
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name", 0)
    Traceback (most recent call last):
              ...
    ValueError: name must be greater than 0


Passing a positive value
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name", 5)


Passing one argument to integer_validator
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name")
    Traceback (most recent call last):
              ...
    TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

Integer_validator with no arguments
    >>> bg = BaseGeometry()
    >>> bg.integer_validator()
    Traceback (most recent call last):
              ...
    TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'


Passing three arguments to integer_validator
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name", 1, 2)
    Traceback (most recent call last):
              ...
    TypeError: BaseGeometry.integer_validator() takes 3 positional arguments but 4 were given


Passing one argument to area method
    >>> bg = BaseGeometry()
    >>> bg.area(5)
    Traceback (most recent call last):
              ...
    TypeError: BaseGeometry.area() takes 1 positional argument but 2 were given

Passing two arguments to area method
    >>> bg = BaseGeometry()
    >>> bg.area(5, 5)
    Traceback (most recent call last):
              ...
    TypeError: BaseGeometry.area() takes 1 positional argument but 3 were given

Passing tuple to method
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", (4,))
    Traceback (most recent call last):
              ...
    TypeError: age must be an integer


Passing list to method
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", [3])
    Traceback (most recent call last):
              ...
    TypeError: age must be an integer


Passing dict to method
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", {3, 4})
    Traceback (most recent call last):
              ...
    TypeError: age must be an integer


Passing None to method
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", None)
    Traceback (most recent call last):
              ...
    TypeError: age must be an integer
