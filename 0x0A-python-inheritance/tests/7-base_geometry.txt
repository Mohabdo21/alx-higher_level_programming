>>> _7_base_geometry = __import__('7-base_geometry')
>>> BaseGeometry = _7_base_geometry.BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)

# Test with a string
>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] name must be an integer

# Test with zero
>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] age must be greater than 0

# Test with a negative integer
>>> try:
...     bg.integer_validator("distance", -4)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] distance must be greater than 0

# Test with a float
>>> try:
...     bg.integer_validator("score", 9.5)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] score must be an integer

# Test with None
>>> try:
...     bg.integer_validator("value", None)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] value must be an integer

# Test with a boolean
>>> try:
...     bg.integer_validator("flag", True)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] flag must be an integer

# Test with a large integer
>>> bg.integer_validator("large_int", 10**18)

# Test with a boolean False
>>> try:
...     bg.integer_validator("flag", False)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] flag must be an integer

# Test with a complex number
>>> try:
...     bg.integer_validator("complex_num", 1 + 2j)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] complex_num must be an integer

# Test with a list
>>> try:
...     bg.integer_validator("my_list", [1, 2, 3])
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] my_list must be an integer

# Test with a dictionary
>>> try:
...     bg.integer_validator("my_dict", {"key": "value"})
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] my_dict must be an integer

# Test with a tuple
>>> try:
...     bg.integer_validator("my_tuple", (1, 2, 3))
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] my_tuple must be an integer

# Test with a large negative integer
>>> try:
...     bg.integer_validator("large_neg_int", -10**18)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] large_neg_int must be greater than 0

# Test with the maximum possible integer
>>> bg.integer_validator("max_int", 2**31 - 1)

# Test with the minimum possible integer
>>> try:
...     bg.integer_validator("min_int", -2**31)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] min_int must be greater than 0

# Test with an empty string
>>> try:
...     bg.integer_validator("empty_str", "")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] empty_str must be an integer

# Test with a string containing a number
>>> try:
...     bg.integer_validator("num_str", "123")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] num_str must be an integer

# Test with a string containing a negative number
>>> try:
...     bg.integer_validator("neg_num_str", "-123")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] neg_num_str must be an integer

# Test with a string containing a float
>>> try:
...     bg.integer_validator("float_str", "9.5")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] float_str must be an integer

